knitr::opts_chunk$set(fig.width = 12, fig.height = 8, cache = FALSE,
echo = FALSE, warning = FALSE, message = FALSE)
require(Biobase)
require (limma)
targetsLocation<- "https://raw.githubusercontent.com/alexsanchezpla/Ejemplo_de_MDA_con_Bioconductor/master/data/targets.txt"
targets<- read.delim(targetsLocation, row.names=1)
targets
dataLocation<- "https://raw.githubusercontent.com/alexsanchezpla/Ejemplo_de_MDA_con_Bioconductor/master/results/Datos.Normalizados.Filtrados.csv2"
dataMatrix <- read.csv2(dataLocation, row.names = 1)
colnames(dataMatrix)==rownames(targets)
design<-matrix(
c(1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,1,1,1,1),
nrow=15,byrow=F) #building the matrix by columns
#writing the matrix, two ways, with the matrix function. With the matrix command
design2 <-model.matrix(~ 0+targets$Group) # Put a 0 because linear model doesn't have an intercept line.
colnames(design)<- colnames(design2)<-c("A", "B", "L")
rownames(design) <- rownames(design2)<- targets$SampleIDs
print(design); print(design2)
#Building  contrast matrix
cont.matrix <- makeContrasts (
AvsB = B-A,
AvsL = L-A,
BvsL = L-B,
levels=design)
print(design); print(design2)
require(limma)
fit<-lmFit(dataMatrix, design) # Fits a linear model, solving the equations to obtain the estimates. Estimates parameters using least sqaures
fit.main<-contrasts.fit(fit, cont.matrix) #Finds estimates of comparisons and significant values
fit.main<-eBayes(fit.main) #
#Example
t.test(x(1.01,1.02,0.99), c(1.09,1.11,1.12))
#Example
t.test(c(1.01,1.02,0.99), c(1.09,1.11,1.12))
topTab_AvsB <- topTable (fit.main, number=nrow(fit.main), coef="AvsB", adjust="fdr"); head(topTab_AvsB)
topTab_AvsL <- topTable (fit.main, number=nrow(fit.main), coef="AvsL", adjust="fdr"); head(topTab_AvsL)
topTab_BvsL  <- topTable (fit.main, number=nrow(fit.main) , coef="BvsL", adjust="fdr"); head(topTab_BvsL)
topTab_BvsL
knitr::opts_chunk$set(echo = TRUE)
require(Biobase)
require (limma)
workingDir <-getwd()
setwd("~/Desktop/Universitat/2_ANY/3_TRIMESTRE/Omics Techniques/Ibanez_Marta-OmicsTechniques/Exercise_2/data")
workingDir <-getwd()
targets <-read.csv(file=file.path(workingDir,"targets.csv"), header = TRUE, sep=";")
design <- matrix(c(1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1), nrow = 11, byrow = F)
design2 <-model.matrix(~ 0+targets$Group)
colnames(design)<- colnames(design2)<-c("ASC", "BM_BSC")
rownames(design) <- rownames(design2)<- targets$ShortName
print(design); print(design2)
cont.matrix <- makeContrasts (
ASC_BMBSC = ASC-BM_BSC,
levels=design)
require(limma)
fit<-lmFit(dataMatrix, design) # Fits a linear model, solving the equations to obtain the estimates. Estimates parameters using least sqaures
knitr::opts_chunk$set(echo = TRUE)
require(Biobase)
workingDir <-getwd()
dataDir <- file.path(workingDir, "data")
resultsDir <- file.path(workingDir, "results")
targets <-read.csv(file=file.path(dataDir,"targets.csv"), header = TRUE, sep=";")
targets
CELfiles <- list.celfiles(file.path(dataDir)) #different cel files in data
require(Biobase)
CELfiles <- list.celfiles(file.path(dataDir)) #different cel files in data
require(Biobase)
installifnot("pd.mogene.1.0.st.v1")
installifnot <- function (pkg){
if (!require(pkg, character.only=T)){
BiocManager::install(pkg)
}else{
require(pkg, character.only=T)
}
}
installifnot("pd.mogene.1.0.st.v1")
#install.packages("gridSVG")
CELfiles <- list.celfiles(file.path(dataDir)) #different cel files in data
CELfiles
rawData <- read.celfiles(file.path(dataDir,CELfiles)) #cel files in another way
sampleNames<- as.character(targets$ShortName)
sampleNames
sampleColor <- as.character(targets$Color)
sampleColor
boxplot(rawData, which="all",las=2, main="Intensity distribution of RAW data",
cex.axis=0.6, names = sampleNames, col=sampleColor)
design <- matrix(c(1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1), nrow = 11, byrow = F)
design2 <-model.matrix(~ 0+targets$Group)
colnames(design)<- colnames(design2)<-c("ASC", "BM_BSC")
rownames(design) <- rownames(design2)<- targets$ShortName
print(design); print(design2)
cont.matrix <- makeContrasts (
ASC_BMBSC = ASC-BM_BSC,
levels=design)
eset<-rma(rawData)
eset_filtered <- nsFilter(eset, var.func=IQR,
var.cutoff=0.75, var.filter=TRUE,
filterByQuantile=TRUE)
installifnot("mogene10sttranscriptcluster.db")
installifnot("oligo")
installifnot("limma")
installifnot("Biobase")
installifnot("arrayQualityMetrics")
installifnot("genefilter")
installifnot("multtest")
installifnot("annotate")
installifnot("xtable")
installifnot("gplots")
installifnot("scatterplot3d")
#install.packages("gridSVG")
eset<-rma(rawData)
eset<-rma(rawData)
annotation(eset) <- "org.Mm.eg.db"
eset_filtered <- nsFilter(eset, var.func=IQR,
var.cutoff=0.75, var.filter=TRUE,
filterByQuantile=TRUE)
#NUMBER OF GENES OUT
print(eset_filtered$filter.log$numLowVar)
#NUMBER OF GENES IN
print(eset_filtered$eset)
print(eset_filtered$eset)
treat <- targets$grupos
lev <- factor(treat, levels = unique(treat))
design <-model.matrix(~0+lev)
#COMPARISON
cont.matrix <- makeContrasts(
Induced.vs.WT = Induced-WT,
levels = design)
#MODEL FIT
fit1 <- lmFit(eset_filtered$eset, design)
fit.main1 <- contrasts.fit(fit1, cont.matrix1)
fit.main1 <- contrasts.fit(fit1, cont.matrix)
fit.main1 <- eBayes(fit.main1)
fit.main1
design <-model.matrix(~0+lev)
treat <- targets$ShortName
lev <- factor(treat, levels = unique(treat))
design <-model.matrix(~0+lev)
colnames(design) <- levels(lev)
rownames(design) <- sampleNames
print(design)
treat <- targets$Group
lev <- factor(treat, levels = unique(treat))
design <-model.matrix(~0+lev)
colnames(design) <- levels(lev)
rownames(design) <- sampleNames
print(design)
#COMPARISON
cont.matrix <- makeContrasts(
Induced.vs.WT = Induced-WT,
levels = design)
comparison1 <- "Effect of Induction"
#MODEL FIT
fit1 <- lmFit(eset_filtered$eset, design)
fit.main1 <- contrasts.fit(fit1, cont.matrix)
fit1
cont.matrix
#COMPARISON
cont.matrix1 <- makeContrasts(
Induced.vs.WT = Induced-WT,
levels = design)
#COMPARISON
cont.matrix1 <- makeContrasts(
ASC_BMBSC = ASC-BM_BSC,
levels = design)
comparison1 <- "Effect of Induction"
#MODEL FIT
fit1 <- lmFit(eset_filtered$eset, design)
fit.main1 <- contrasts.fit(fit1, cont.matrix1)
fit.main1 <- contrasts.fit(fit1, cont.matrix)
fit.main1 <- eBayes(fit.main1)
treat <- targets$grupos
lev <- factor(treat, levels = unique(treat))
design <-model.matrix(~0+lev)
colnames(design) <- levels(lev)
rownames(design) <- sampleNames
print(design)
#COMPARISON
cont.matrix1 <- makeContrasts(
Induced.vs.WT = Induced-WT,
levels = design)
comparison1 <- "Effect of Induction"
#MODEL FIT
fit1 <- lmFit(eset_filtered$eset, design)
fit.main1 <- contrasts.fit(fit1, cont.matrix1)
fit.main1 <- eBayes(fit.main1)
#COMPARISON
cont.matrix1 <- makeContrasts(
Induced.vs.WT = Induced-WT,
levels = design)
?makeContrasts
cont.matrix <- makeContrasts (
ASC_BMBSC = ASC-BM_BSC,
levels=design)
require(Biobase)
require (limma)
workingDir <-getwd()
targets <-read.csv(file=file.path(workingDir,"targets.csv"), header = TRUE, sep=";")
design <- matrix(c(1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1), nrow = 11, byrow = F)
design2 <-model.matrix(~ 0+targets$Group)
colnames(design)<- colnames(design2)<-c("ASC", "BM_BSC")
rownames(design) <- rownames(design2)<- targets$ShortName
print(design); print(design2)
cont.matrix <- makeContrasts (
ASC_BMBSC = ASC-BM_BSC,
levels=design)
#COMPARISON
cont.matrix1 <- makeContrasts(
ASC_BMBSC = ASC-BM_BSC,
levels = design)
comparison1 <- "Effect of Induction"
#MODEL FIT
fit1 <- lmFit(eset_filtered$eset, design)
fit.main1 <- contrasts.fit(fit1, cont.matrix)
fit.main1 <- eBayes(fit.main1)
fit.main1
topTab_AvsB <- topTable (fit.main, number=nrow(fit.main), coef="AvsB", adjust="fdr"); head(topTab_AvsB)
topTab_AvsL <- topTable (fit.main, number=nrow(fit.main), coef="AvsL", adjust="fdr"); head(topTab_AvsL)
topTab_BvsL  <- topTable (fit.main, number=nrow(fit.main) , coef="BvsL", adjust="fdr"); head(topTab_BvsL)
volcanoplot(fit.main, coef="AvsB", highlight=10)
volcanoplot(fit.main, coef="AvsL", highlight=10)
volcanoplot(fit.main, coef="BvsL", highlight=10)
BiocManager::install("hgu133a.db")
require(hgu133a.db)
columns(hgu133a.db)
head(topTab_AvsB, n=10)
probesAvsB <- rownames(topTab_AvsB)[1:10]
antotAvsB < select(hgu133a, probesAvsB, columns = c("ENTREZID", "SYMBOL", "GENENAME"))
antotAvsB <- select(hgu133a, probesAvsB, columns = c("ENTREZID", "SYMBOL", "GENENAME"))
antotAvsB <- select(hgu133a.db, probesAvsB, columns = c("ENTREZID", "SYMBOL", "GENENAME"))
View(antotAvsB)
